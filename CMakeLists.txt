
# Set the minimum version of cmake required to 2.6
CMAKE_MINIMUM_REQUIRED( VERSION 2.6 )

PROJECT( FTGL )

SET( PROJECT_NAMESPACE_PREFIX FTGL )
SET( LIBRARY_TARGET_NAME FTGL )
# STRING( TOUPPER ${LIBRARY_TARGET_NAME}  )
SET( FTGL_MAJOR_VERSION "2" )
SET( FTGL_MINOR_VERSION "1" )
SET( FTGL_PATCH_VERSION "3" )

SET( PACKAGE_VERSION \"${FTGL_MAJOR_VERSION}.${FTGL_MINOR_VERSION}.${FTGL_PATCH_VERSION}\" ) 

MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

MACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	SET( ${OPTION_NAME} "${OPTION_DEFAULT}" CACHE ${OPTION_TYPE} "${OPTION_STRING}" )
ENDMACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )

# Set up library options
# Generic library options
CACHE_VAR_WITH_DEFAULT( ${PROJECT_NAMESPACE_PREFIX}_BUILD_TYPE "Release" STRING 
	"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel" )
SET( CMAKE_BUILD_TYPE ${${PROJECT_NAMESPACE_PREFIX}_BUILD_TYPE} CACHE
	INTERNAL "Internalise this variable and manipulate with
	${PROJECT_NAMESPACE_PREFIX}_BUILD_TYPE" FORCE )
CACHE_VAR_WITH_DEFAULT( ${PROJECT_NAMESPACE_PREFIX}_INSTALL_PREFIX
	"${CMAKE_INSTALL_PREFIX}" PATH 
	"Install path prefix, prepended onto install directories." )
SET( CMAKE_INSTALL_PREFIX ${${PROJECT_NAMESPACE_PREFIX}_INSTALL_PREFIX}
	CACHE INTERNAL "Internalise this variable and manipulate with
	${PROJECT_NAMESPACE_PREFIX}_INSTALL_PREFIX" FORCE )
OPTION_WITH_DEFAULT( ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB "Build static ftgl" TRUE )
OPTION_WITH_DEFAULT( ${PROJECT_NAMESPACE_PREFIX}_INSTALL_CONFIG "Install a config file for the library" FALSE )

IF( ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE STATIC )
	SET( LIBRARY_INSTALL_TYPE ARCHIVE )
ELSE( ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB )
	SET( LIBRARY_BUILD_TYPE SHARED )
	SET( LIBRARY_INSTALL_TYPE LIBRARY )
	IF( WIN32 )
		SET( LIBRARY_INSTALL_TYPE RUNTIME )
	ENDIF( WIN32 )
ENDIF( ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB )

# Set required definitions for building FTGL.  This should really
# be in a config.h header file but that's more changes.
IF( WIN32 )
	SET( FTGL_DEFINITIONS -D_CRT_SECURE_NO_WARNINGS )
ENDIF( WIN32 )
IF( NOT ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB )
	SET( FTGL_DEFINITIONS ${FTGL_DEFINITIONS} -DFTGL_SHARED_LIB )
ENDIF( NOT ${PROJECT_NAMESPACE_PREFIX}_BUILD_STATIC_LIB )

FIND_PACKAGE( Freetype REQUIRED )

SET( FREETYPE_PATH ${FREETYPE_INCLUDE_DIRS} )

INCLUDE( ConfigureChecks.cmake )

# Configure header file
CONFIGURE_FILE( ftgl_config.h.cmake
	${CMAKE_CURRENT_BINARY_DIR}/config/ftgl_config.h )

# Add configured header file to header file search path
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR}/config/ )

ADD_DEFINITIONS( ${FTGL_DEFINITIONS}  )

INCLUDE_DIRECTORIES( ${FREETYPE_PATH} )
INCLUDE_DIRECTORIES( src )
INCLUDE_DIRECTORIES( src/FTFont )
INCLUDE_DIRECTORIES( src/FTGL )
INCLUDE_DIRECTORIES( src/FTGlyph )
INCLUDE_DIRECTORIES( src/FTLayout )

SET( PUBLIC_HDRS
	src/FTGL/FTBBox.h 
	src/FTGL/FTBitmapGlyph.h
	src/FTGL/FTBuffer.h
	src/FTGL/FTGLExtrdFont.h
	src/FTGL/FTGLPolygonFont.h
	src/FTGL/FTOutlineGlyph.h
	src/FTGL/FTSimpleLayout.h
	src/FTGL/FTBitmapGlyph.h
	src/FTGL/FTExtrdGlyph.h
	src/FTGL/ftgl.h
	src/FTGL/FTGLTextureFont.h
	src/FTGL/FTPixmapGlyph.h
	src/FTGL/FTTextureGlyph.h
	src/FTGL/FTBufferFont.h
	src/FTGL/FTFont.h
	src/FTGL/FTGLOutlineFont.h
	src/FTGL/FTGlyph.h
	src/FTGL/FTPoint.h
	src/FTGL/FTBufferGlyph.h
	src/FTGL/FTGLBitmapFont.h
	src/FTGL/FTGLPixmapFont.h
	src/FTGL/FTLayout.h
	src/FTGL/FTPolyGlyph.h )

SET( CMAKE_DEBUG_POSTFIX "d" )
SET( CMAKE_MFC_FLAG 0 )

# Defines NGLIB_SRCS all the sources required for a stripped down library
# suitable for cmgui
INCLUDE( ftgl-cmgui.cmake )

IF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )
	INCLUDE( ftgl-cmgui.cmake )
	SET_SOURCE_FILES_PROPERTIES(${FTGL_SRCS}
		PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" )

# Create library target
ADD_LIBRARY( ${LIBRARY_TARGET_NAME} ${LIBRARY_BUILD_TYPE} ${FTGL_SRCS} )

# Set the install targets
INSTALL( TARGETS ${LIBRARY_TARGET_NAME} EXPORT ${LIBRARY_TARGET_NAME}-targets ${LIBRARY_INSTALL_TYPE}
	DESTINATION lib )
INSTALL(FILES ${PUBLIC_HDRS}
	DESTINATION include/FTGL
)

IF( ${PROJECT_NAMESPACE_PREFIX}_INSTALL_CONFIG )
	STRING( TOLOWER ${PROJECT_NAMESPACE_PREFIX} LOWER_PROJECT_NAMESPACE_PREFIX )
	SET( LIBRARY_CONFIG_FILE
		${CMAKE_CURRENT_BINARY_DIR}/${LOWER_PROJECT_NAMESPACE_PREFIX}-config.cmake )
	SET( CONFIG_FILE_CONTENTS 
		"\nIF( NOT DEFINED _${PROJECT_NAMESPACE_PREFIX}_CONFIG_CMAKE )" 
		"\nSET( _${PROJECT_NAMESPACE_PREFIX}_CONFIG_CMAKE TRUE )" 
	        "\nGET_FILENAME_COMPONENT( SELF_DIR \"\${CMAKE_CURRENT_LIST_FILE}\" PATH )"
	        "\nINCLUDE( \${SELF_DIR}/${LIBRARY_TARGET_NAME}-targets.cmake )"
	        "\nGET_FILENAME_COMPONENT( ${PROJECT_NAMESPACE_PREFIX}_INCLUDE_DIRS \"\${SELF_DIR}/../../include\" ABSOLUTE )"
	        "\nSET( ${PROJECT_NAMESPACE_PREFIX}_LIBRARIES ${LIBRARY_TARGET_NAME} )"
	        "\nSET( ${PROJECT_NAMESPACE_PREFIX}_DEFINITIONS )"
	        "\nSET( ${PROJECT_NAMESPACE_PREFIX}_FOUND TRUE )" 
		"\nENDIF( NOT DEFINED _${PROJECT_NAMESPACE_PREFIX}_CONFIG_CMAKE )" 
	        "\n" )
	FILE( WRITE ${LIBRARY_CONFIG_FILE} ${CONFIG_FILE_CONTENTS} )
	INSTALL( FILES ${LIBRARY_CONFIG_FILE} DESTINATION lib/cmake )
	INSTALL( EXPORT ${LIBRARY_TARGET_NAME}-targets 
		DESTINATION lib/cmake )
ENDIF( ${PROJECT_NAMESPACE_PREFIX}_INSTALL_CONFIG )

